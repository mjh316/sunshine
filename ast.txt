[
    "(var \"rows\" = Literal(Literal { content: Number(64.0) }))",
    "(var \"cols\" = Literal(Literal { content: Number(64.0) }))",
    "(var \"dbg\" = Var(\"true\", None))",
    "(struct \"Cell\" [\"x\", \"y\", \"live\"])",
    "(fn \"seed\" [] [Var(\"cells\", Some(Array(Array { content: [] }))), For(\"x\", [Literal(Literal { content: Number(0.0) }), Var(\"rows\", None)], [For(\"y\", [Literal(Literal { content: Number(0.0) }), Var(\"cols\", None)], [Var(\"live\", Some(Var(\"false\", None))), Var(\"chance\", Some(Call(Var(\"random\", None), [Literal(Literal { content: Number(0.0) }), Literal(Literal { content: Number(100.0) })]))), Conditional(Binary(Var(\"chance\", None), Lt, Literal(Literal { content: Number(10.0) })), [Var(\"live\", Some(Var(\"true\", None)))], []), Call(PointGet(Var(\"cells\", None), \"add\"), [Instance(\"Cell\", {\"live\": Var(\"live\", None), \"x\": Var(\"x\", None), \"y\": Var(\"y\", None)})])])]), Return(Var(\"cells\", None))])",
    "(var \"cells\" = Call(Var(\"seed\", None), []))",
    "(fn \"getNeighbors\" [\"cells\", \"index\"] [Var(\"neighbors\", Some(Array(Array { content: [] }))), Conditional(Binary(Binary(Var(\"index\", None), Minus, Binary(Var(\"rows\", None), Minus, Literal(Literal { content: Number(1.0) }))), Gt, Literal(Literal { content: Number(0.0) })), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Minus, Binary(Var(\"rows\", None), Minus, Literal(Literal { content: Number(1.0) }))), true)])], []), Conditional(Binary(Binary(Var(\"index\", None), Minus, Var(\"rows\", None)), Gt, Literal(Literal { content: Number(0.0) })), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Minus, Var(\"rows\", None)), true)])], []), Conditional(Binary(Binary(Var(\"index\", None), Minus, Binary(Var(\"rows\", None), Plus, Literal(Literal { content: Number(1.0) }))), Gt, Literal(Literal { content: Number(0.0) })), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Minus, Binary(Var(\"rows\", None), Plus, Literal(Literal { content: Number(1.0) }))), true)])], []), Conditional(Binary(Var(\"index\", None), Gt, Literal(Literal { content: Number(0.0) })), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Minus, Literal(Literal { content: Number(1.0) })), true)])], []), Conditional(Binary(Var(\"index\", None), Lt, Binary(PointGet(Var(\"cells\", None), \"length\"), Minus, Literal(Literal { content: Number(1.0) }))), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Plus, Literal(Literal { content: Number(1.0) })), true)])], []), Conditional(Binary(Binary(Var(\"index\", None), Plus, Binary(Var(\"rows\", None), Minus, Literal(Literal { content: Number(1.0) }))), Lt, Binary(PointGet(Var(\"cells\", None), \"length\"), Minus, Literal(Literal { content: Number(1.0) }))), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Plus, Binary(Var(\"rows\", None), Minus, Literal(Literal { content: Number(1.0) }))), true)])], []), Conditional(Binary(Binary(Var(\"index\", None), Plus, Var(\"rows\", None)), Lt, Binary(PointGet(Var(\"cells\", None), \"length\"), Minus, Literal(Literal { content: Number(1.0) }))), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Plus, Var(\"rows\", None)), true)])], []), Conditional(Binary(Binary(Var(\"index\", None), Plus, Binary(Var(\"rows\", None), Plus, Literal(Literal { content: Number(1.0) }))), Lt, Binary(PointGet(Var(\"cells\", None), \"length\"), Minus, Literal(Literal { content: Number(1.0) }))), [Call(PointGet(Var(\"neighbors\", None), \"add\"), [Get(Var(\"cells\", None), Binary(Var(\"index\", None), Plus, Binary(Var(\"rows\", None), Plus, Literal(Literal { content: Number(1.0) }))), true)])], []), Var(\"alive\", Some(Array(Array { content: [] }))), For(\"i\", [Literal(Literal { content: Number(0.0) }), PointGet(Var(\"neighbors\", None), \"length\")], [Conditional(PointGet(Get(Var(\"neighbors\", None), Var(\"i\", None), true), \"live\"), [Call(PointGet(Var(\"alive\", None), \"add\"), [Get(Var(\"neighbors\", None), Var(\"i\", None), true)])], [])]), Return(Var(\"alive\", None))])",
    "(if Var(\"dbg\", None) [Call(Var(\"ink\", None), [Call(Var(\"getNeighbors\", None), [Var(\"cells\", None), Binary(Var(\"rows\", None), Asterisk, Binary(Var(\"cols\", None), Slash, Literal(Literal { content: Number(2.0) })))])])] [])",
    "(fn \"painting\" [] [For(\"i\", [Literal(Literal { content: Number(0.0) }), PointGet(Var(\"cells\", None), \"length\")], [Var(\"cell\", Some(Get(Var(\"cells\", None), Var(\"i\", None), true))), Var(\"neighbors\", Some(Call(Var(\"getNeighbors\", None), [Var(\"cells\", None), Var(\"i\", None)]))), Conditional(PointGet(Var(\"cell\", None), \"live\"), [Conditional(Binary(PointGet(Var(\"neighbors\", None), \"length\"), Lt, Binary(Literal(Literal { content: Number(2.0) }), Or, Binary(PointGet(Var(\"neighbors\", None), \"length\"), Gt, Literal(Literal { content: Number(3.0) })))), [Set(\"cell\", \"live\", Var(\"false\", None))], [Conditional(Binary(Unary(Not, PointGet(Var(\"cell\", None), \"live\")), And, Binary(PointGet(Var(\"neighbors\", None), \"length\"), Equiv, Literal(Literal { content: Number(3.0) }))), [Set(\"cell\", \"live\", Var(\"true\", None))], [])])], [Conditional(Literal(Literal { content: Boolean(true) }), [Conditional(Binary(PointGet(Var(\"neighbors\", None), \"length\"), Equiv, Literal(Literal { content: Number(3.0) })), [Set(\"cell\", \"live\", Var(\"true\", None))], [])], [])]), Conditional(PointGet(Var(\"cell\", None), \"live\"), [Var(\"color\", Some(Instance(\"Color\", {\"r\": Literal(Literal { content: Number(255.0) }), \"g\": Literal(Literal { content: Number(0.0) }), \"b\": Literal(Literal { content: Number(0.0) })}))), Call(PointGet(Var(\"Canvas\", None), \"fill\"), [PointGet(Var(\"cell\", None), \"x\"), PointGet(Var(\"cell\", None), \"y\"), Var(\"color\", None)])], [Conditional(Literal(Literal { content: Boolean(true) }), [Call(PointGet(Var(\"Canvas\", None), \"erase\"), [PointGet(Var(\"cell\", None), \"x\"), PointGet(Var(\"cell\", None), \"y\")])], [])])])])",
    "(if Var(\"dbg\", None) [Func(\"includes\", [\"array\", \"value\"], [For(\"i\", [Literal(Literal { content: Number(0.0) }), PointGet(Var(\"array\", None), \"length\")], [Conditional(Binary(Get(Var(\"array\", None), Var(\"i\", None), true), Equiv, Var(\"value\", None)), [Return(Var(\"true\", None))], [])]), Return(Var(\"false\", None))]), Var(\"test\", Some(Array(Array { content: [Literal(Literal { content: String(\"hello\") }), Literal(Literal { content: String(\"world\") }), Literal(Literal { content: String(\"fox\") })] }))), Call(Var(\"ink\", None), [Var(\"test\", None)]), Conditional(Unary(Not, Binary(Var(\"false\", None), And, Call(Var(\"includes\", None), [Var(\"test\", None), Literal(Literal { content: String(\"foxes\") })]))), [Call(Var(\"ink\", None), [Literal(Literal { content: String(\"NOT false AND includes foxes in test evaluates to true\") })])], [])] [])",
]